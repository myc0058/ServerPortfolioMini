// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Administrator.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Schema.Protobuf.Message.Administrator {

  /// <summary>Holder for reflection information generated from Administrator.proto</summary>
  public static partial class AdministratorReflection {

    #region Descriptor
    /// <summary>File descriptor for Administrator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AdministratorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNBZG1pbmlzdHJhdG9yLnByb3RvEiVTY2hlbWEuUHJvdG9idWYuTWVzc2Fn",
            "ZS5BZG1pbmlzdHJhdG9yIiIKD1Rlcm1pbmFsQ29tbWFuZBIPCgdDb21tYW5k",
            "GAEgASgJIkcKEkNvbm5lY3RlZEFnZW50SW5mbxILCgNVSUQYASABKAMSEwoL",
            "U2VydmVyVHlwZXMYAiADKAkSDwoHQWRkcmVzcxgDIAEoAyITCgRFeGl0EgsK",
            "A1VJRBgBIAEoAyJbCg9HYW1lU2VydmVyU3RhdGUSFAoMR2FtZVNlcnZlcklE",
            "GAEgASgDEhgKEExvYmJ5RGVsZWdhdG9ySUQYAiABKAMSGAoQUnVubmluZ0dh",
            "bWVDb3VudBgDIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.Protobuf.Message.Administrator.TerminalCommand), global::Schema.Protobuf.Message.Administrator.TerminalCommand.Parser, new[]{ "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.Protobuf.Message.Administrator.ConnectedAgentInfo), global::Schema.Protobuf.Message.Administrator.ConnectedAgentInfo.Parser, new[]{ "UID", "ServerTypes", "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.Protobuf.Message.Administrator.Exit), global::Schema.Protobuf.Message.Administrator.Exit.Parser, new[]{ "UID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Schema.Protobuf.Message.Administrator.GameServerState), global::Schema.Protobuf.Message.Administrator.GameServerState.Parser, new[]{ "GameServerID", "LobbyDelegatorID", "RunningGameCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TerminalCommand : pb::IMessage<TerminalCommand> {
    private static readonly pb::MessageParser<TerminalCommand> _parser = new pb::MessageParser<TerminalCommand>(() => new TerminalCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TerminalCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.Protobuf.Message.Administrator.AdministratorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerminalCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerminalCommand(TerminalCommand other) : this() {
      command_ = other.command_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TerminalCommand Clone() {
      return new TerminalCommand(this);
    }

    /// <summary>Field number for the "Command" field.</summary>
    public const int CommandFieldNumber = 1;
    private string command_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TerminalCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TerminalCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command.Length != 0) hash ^= Command.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Command);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Command);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TerminalCommand other) {
      if (other == null) {
        return;
      }
      if (other.Command.Length != 0) {
        Command = other.Command;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Command = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectedAgentInfo : pb::IMessage<ConnectedAgentInfo> {
    private static readonly pb::MessageParser<ConnectedAgentInfo> _parser = new pb::MessageParser<ConnectedAgentInfo>(() => new ConnectedAgentInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectedAgentInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.Protobuf.Message.Administrator.AdministratorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectedAgentInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectedAgentInfo(ConnectedAgentInfo other) : this() {
      uID_ = other.uID_;
      serverTypes_ = other.serverTypes_.Clone();
      address_ = other.address_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectedAgentInfo Clone() {
      return new ConnectedAgentInfo(this);
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 1;
    private long uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    /// <summary>Field number for the "ServerTypes" field.</summary>
    public const int ServerTypesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_serverTypes_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> serverTypes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ServerTypes {
      get { return serverTypes_; }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 3;
    private long address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectedAgentInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectedAgentInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UID != other.UID) return false;
      if(!serverTypes_.Equals(other.serverTypes_)) return false;
      if (Address != other.Address) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UID != 0L) hash ^= UID.GetHashCode();
      hash ^= serverTypes_.GetHashCode();
      if (Address != 0L) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UID);
      }
      serverTypes_.WriteTo(output, _repeated_serverTypes_codec);
      if (Address != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UID);
      }
      size += serverTypes_.CalculateSize(_repeated_serverTypes_codec);
      if (Address != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectedAgentInfo other) {
      if (other == null) {
        return;
      }
      if (other.UID != 0L) {
        UID = other.UID;
      }
      serverTypes_.Add(other.serverTypes_);
      if (other.Address != 0L) {
        Address = other.Address;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UID = input.ReadInt64();
            break;
          }
          case 18: {
            serverTypes_.AddEntriesFrom(input, _repeated_serverTypes_codec);
            break;
          }
          case 24: {
            Address = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Exit : pb::IMessage<Exit> {
    private static readonly pb::MessageParser<Exit> _parser = new pb::MessageParser<Exit>(() => new Exit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Exit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.Protobuf.Message.Administrator.AdministratorReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exit(Exit other) : this() {
      uID_ = other.uID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Exit Clone() {
      return new Exit(this);
    }

    /// <summary>Field number for the "UID" field.</summary>
    public const int UIDFieldNumber = 1;
    private long uID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UID {
      get { return uID_; }
      set {
        uID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Exit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Exit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UID != other.UID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UID != 0L) hash ^= UID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Exit other) {
      if (other == null) {
        return;
      }
      if (other.UID != 0L) {
        UID = other.UID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UID = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameServerState : pb::IMessage<GameServerState> {
    private static readonly pb::MessageParser<GameServerState> _parser = new pb::MessageParser<GameServerState>(() => new GameServerState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameServerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Schema.Protobuf.Message.Administrator.AdministratorReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerState(GameServerState other) : this() {
      gameServerID_ = other.gameServerID_;
      lobbyDelegatorID_ = other.lobbyDelegatorID_;
      runningGameCount_ = other.runningGameCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerState Clone() {
      return new GameServerState(this);
    }

    /// <summary>Field number for the "GameServerID" field.</summary>
    public const int GameServerIDFieldNumber = 1;
    private long gameServerID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GameServerID {
      get { return gameServerID_; }
      set {
        gameServerID_ = value;
      }
    }

    /// <summary>Field number for the "LobbyDelegatorID" field.</summary>
    public const int LobbyDelegatorIDFieldNumber = 2;
    private long lobbyDelegatorID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LobbyDelegatorID {
      get { return lobbyDelegatorID_; }
      set {
        lobbyDelegatorID_ = value;
      }
    }

    /// <summary>Field number for the "RunningGameCount" field.</summary>
    public const int RunningGameCountFieldNumber = 3;
    private int runningGameCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RunningGameCount {
      get { return runningGameCount_; }
      set {
        runningGameCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameServerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameServerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameServerID != other.GameServerID) return false;
      if (LobbyDelegatorID != other.LobbyDelegatorID) return false;
      if (RunningGameCount != other.RunningGameCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameServerID != 0L) hash ^= GameServerID.GetHashCode();
      if (LobbyDelegatorID != 0L) hash ^= LobbyDelegatorID.GetHashCode();
      if (RunningGameCount != 0) hash ^= RunningGameCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GameServerID != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GameServerID);
      }
      if (LobbyDelegatorID != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LobbyDelegatorID);
      }
      if (RunningGameCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RunningGameCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameServerID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameServerID);
      }
      if (LobbyDelegatorID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LobbyDelegatorID);
      }
      if (RunningGameCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RunningGameCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameServerState other) {
      if (other == null) {
        return;
      }
      if (other.GameServerID != 0L) {
        GameServerID = other.GameServerID;
      }
      if (other.LobbyDelegatorID != 0L) {
        LobbyDelegatorID = other.LobbyDelegatorID;
      }
      if (other.RunningGameCount != 0) {
        RunningGameCount = other.RunningGameCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            GameServerID = input.ReadInt64();
            break;
          }
          case 16: {
            LobbyDelegatorID = input.ReadInt64();
            break;
          }
          case 24: {
            RunningGameCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
